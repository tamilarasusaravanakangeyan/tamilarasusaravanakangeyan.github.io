<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Frontend Development on Tamilarasu Saravanakangeyan - Portfolio &amp; Blog</title>
    <link>http://localhost:1313/blog/web-development/frontend/</link>
    <description>Recent content in Frontend Development on Tamilarasu Saravanakangeyan - Portfolio &amp; Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <managingEditor>your.email@example.com (Tamilarasu Saravanakangeyan)</managingEditor>
    <webMaster>your.email@example.com (Tamilarasu Saravanakangeyan)</webMaster>
    <lastBuildDate>Mon, 15 Jan 2024 10:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/blog/web-development/frontend/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Advanced React Hooks: Building Custom Hooks for Better Code Reusability</title>
      <link>http://localhost:1313/blog/blog/2024/01/advanced-react-hooks-building-custom-hooks-for-better-code-reusability/</link>
      <pubDate>Mon, 15 Jan 2024 10:00:00 +0000</pubDate><author>your.email@example.com (Tamilarasu Saravanakangeyan)</author>
      <guid>http://localhost:1313/blog/blog/2024/01/advanced-react-hooks-building-custom-hooks-for-better-code-reusability/</guid>
      <description>&lt;p&gt;React Hooks revolutionized how we write React components, moving away from class-based components to functional components with state and lifecycle capabilities. While built-in hooks like &lt;code&gt;useState&lt;/code&gt; and &lt;code&gt;useEffect&lt;/code&gt; are powerful, the real magic happens when you start creating your own custom hooks.&lt;/p&gt;&#xA;&lt;p&gt;In this comprehensive guide, we&amp;rsquo;ll explore advanced techniques for building custom hooks that will make your code more reusable, testable, and maintainable.&lt;/p&gt;&#xA;&lt;h2 id=&#34;what-are-custom-hooks&#34;&gt;What Are Custom Hooks?&lt;/h2&gt;&#xA;&lt;p&gt;Custom hooks are JavaScript functions whose names start with &amp;ldquo;use&amp;rdquo; and that may call other hooks. They allow you to extract component logic into reusable functions, promoting the DRY (Don&amp;rsquo;t Repeat Yourself) principle.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
